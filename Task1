Завдання 2
Використовуючи функції Bash, напишіть скрипт filecreator.sh, щоб створювати файли в поточному каталозі. Необхідно щоб цей скрипт мав наступний функціонал:
Створював 25 пустих (0 KB) файлів (Підказка: можна використати команду touch).
Імена файлів повинні мати наступний формат <yourName><number>, <yourName><number+1>, <yourName><number+2>, і так далі.
Кожного разу, коли ви його запускаєте, він повинен створювати наступну групу з 25 файлів зі зростаючими номерами, починаючи з останнього або максимального числа, яке вже існує. Не кодуйте ці цифри жорстко. Їх потрібно генерувати автоматично (Підказка: для простоти можна використати підрахунок кількості файлів).
Наприклад:

# Запустіть свій скрипт
$ ./filecreator.sh

# Перевірте поточну директорію. Ви повинні побачити 25 файлів з вашим імʼям і числом, наприклад dmytro1, dmytro2, ..., dmytro25
$ ls

# Видаліть останній файл
$ rm dmytro25

# Запустіть свій скрипт ще раз
$ ./filecreator.sh

# Перевірте поточну директорію. Ви повинні побачити 49 файлів з вашим імʼям і числом, наприклад dmytro1, dmytro2, ..., dmytro49
$ ls


Завдання 3
	Напишіть скрипт addressbook, який має таку поведінку:
./addressbook new <name> <email> додає запис до адресної книги. Не турбуйтеся про дублікати (завжди додавайте новий запис, навіть якщо ім’я те саме).
./addressbook list відображає кожен запис в адресній книзі (без певного порядку). Якщо в адресній книзі немає записів, відображати "адресна книга порожня".
./addressbook remove <name> видаляє всі записи, пов’язані з цим іменем. Нічого не робіть, якщо цього імені немає в адресній книзі.
./addressbook clear видаляє всю адресну книгу.
./addressbook lookup <name> відображає всі електронні адреси, пов’язані з цим іменем. Ви можете припустити, що всі електронні адреси мають форму aaa@aaa.aaa, де aaa — це будь-яка кількість цифр або літер. Ви можете надрукувати ім’я, а також електронну адресу для кожного рядка. Для додаткового завдання спробуйте надрукувати всі адреси без імен. Ви можете знаходити електронні адреси за допомогою регулярних виразів. Деякі приклади тут і тут.
Наприклад:

$ ./addressbook new "John Doe" a@gmail.com

$ ./addressbook list
John Doe a@gmail.com

$ ./addressbook new "Vasya Pupkin" v@gmail.com

$ ./addressbook new "John Doe" b@gmail.com

$ ./addressbook list
John Doe a@gmail.com
Vasya Pupkin v@gmail.com
John Doe b@gmail.com

# Опціональна поведінка
$ ./addressbook lookup "John Doe"
a@gmail.com
b@gmail.com

# Алтренативна поведінка
$ ./addressbook lookup "John Doe"
John Doe a@gmail.com
John Doe b@gmail.com

$ ./addressbook remove "John Doe"
$ ./addressbook list
Vasya Pupkin v@gmail.com

$ ./addressbook clear
$ ./addressbook list
addressbook is empty


В якості “бази даних” для адресної книги необхідно використати звичайний текстовий файл. Всі операції повинні якимось чином працювати з цим файлом, тому перед опрацюванням операцій необхідно перевірити чи існує цей файл і за необхідністю - створити його..

Примітка: Якщо ви зіткнетеся з граничним випадком, який тут не описаний, ви можете впоратися з ним як завгодно (або не розглядати його взагалі). Ви можете припустити, що всі введені дані мають правильний формат.


	
Підказки:
bash має оператор додавання >>, який додає дані з першого аргументу до кінця другого аргументу (в кінець файлу).
bash також має оператор перенаправлення >, який приймає вихідні дані однієї команди та виводить їх у файл.
У bash змінювати рядки можна за допомогою команд sed, cut, tr або awk.
bash надає свої аргументи командного рядка через позиційні параметри $<integer>
